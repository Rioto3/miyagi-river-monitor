name: 宮城県河川情報スクレイピング
on:
  schedule:
    # 毎日午前9時(日本時間)に実行 = UTC 0:00
    - cron: '0 0 * * *'
  workflow_dispatch:  # 手動実行用

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          ref: release # releaseブランチを使用
          fetch-depth: 0 # 履歴を全て取得
      
      - name: mainブランチの内容を取得
        run: |
          git fetch origin main
          # スクリプトファイルのみをmainからreleaseにコピー
          git checkout origin/main -- scraper.py requirements.txt
      
      - name: Python 3.9のセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: 依存パッケージのインストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: スクレイピングの実行
        id: scrape
        run: |
          python scraper.py
          # スクレイピングの結果を確認（0=新しい記事あり、1=新しい記事なし）
          if [ $? -eq 0 ]; then
            echo "has_new_articles=true" >> $GITHUB_OUTPUT
          else
            echo "has_new_articles=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 結果ファイルをコミットして変更を確認
        id: check_changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # メタデータJSONファイルと通知テキストファイルをステージング
          git add miyagi_river_metadata.json notification_output.txt
          # 変更があるか確認
          if git diff --staged --quiet; then
            echo "変更はありません。"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "変更があります。コミットします。"
            git commit -m "更新: 宮城県河川情報 $(date +'%Y-%m-%d')"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: 変更をreleaseブランチにプッシュ
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GHUB_TOKEN }}
          branch: release
      
      - name: 通知を送信
        if: steps.scrape.outputs.has_new_articles == 'true'
        run: |
          # 通知テキストファイルが存在し、内容があるか確認
          if [ -s notification_output.txt ]; then
            # ファイルの内容を変数に格納
            notification_content=$(cat notification_output.txt)
            
            # 一回の通知で送信
            curl -L -X POST \
              -H "Content-Type: application/json" \
              -d "{
                \"message\": \"$notification_content\",
                \"x-api-key\": \"${{ secrets.MAKANA_LINE_API_KEY }}\"
              }" \
              "${{ secrets.MAKANA_CALL_URL }}"
              
            echo "通知を送信しました。"
          else
            echo "通知するコンテンツがありません。"
          fi